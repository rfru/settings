(deftheme personal"my light theme.")
(set-cursor-color "#bbb")
(blink-cursor-mode 1)
(setq blink-cursor-blinks 0)
(setq cursor-type 'box)
(setq evil-normal-state-cursor '(box "#666"))
(setq evil-insert-state-cursor '((bar . 2) "#666"))
(setq evil-visual-state-cursor '(box "#666"))

(setq-default header-line-format mode-line-format)
(setq-default mode-line-format nil)
(setq go-fontify-function-calls nil)
(defun helm-display-mode-line (source &optional force) ())

;; (defun wide-start-spaces ()
;;   (when (not (eq 'web-mode major-mode))
;;   (font-lock-add-keywords nil '(("^[[:space:]]+" 0 '(:family "Menlo") t)))))
;; (add-hook 'prog-mode-hook 'wide-start-spaces)
;; (add-hook 'ess-mode-hook  'wide-start-spaces)

(defun set-theme (light)
  (let* ((gui (display-graphic-p))
         (pureblack (if light "#000" "#fff"))
         (black (if light "#333" "#ccc"))
         (gray (if light "#aaa" "#888"))
         (yellow "#CD9B1D")
         (lightyellow "#FCF2DB")
         (brown "#D2B48C")
         ;; (green "#aaa")
         ;; (green "forestgreen")
         (red "red")
         (blue "#6E819F")
         (verylightgray (if light "#f2f2f2" "#404040"))
         (lightgray2 (if light "#efefef" "#505050"))
         (lightgray (if light "#e7e7e7" "#585858"))
         (pink "#EE6363")
         (darkgray (if light "#666" "#999"))
         (white (if light "white" "#333")))
    (custom-theme-set-faces
     'personal
     ;;;;;;;;;;;;;;;;;;;;;;;
                                        ; Direct specification.
     ;;;;;;;;;;;;;;;;;;;;;;;
     `(default ((t (:foreground ,black :background ,white))))
     `(isearch ((t (:background ,lightyellow))))
     `(lazy-highlight ((t (:inherit highlight))))
     `(hl-line ((t :background ,verylightgray)))
     `(highlight ((t :background ,lightgray)))

     `(font-lock-builtin-face ((t (:foreground ,black))))
     `(font-lock-constant-face ((t ())))
     `(font-lock-string-face ((t (:foreground ,black :background ,verylightgray :family "Menlo" :height 0.9))))
     `(font-lock-function-name-face ((t (:foreground ,pink :family "Tisa Sans Pro" :weight normal :height 1.3))))
     `(font-lock-comment-face ((t (:foreground ,gray :slant italic))))
     `(font-lock-keyword-face ((t (:foreground ,black  :weight bold))))
     `(font-lock-variable-name-face ((t ())))
     `(font-lock-type-face ((t (:foreground ,blue))))

     `(vhl/default-face ((t (:foreground ,red))))

     `(error ((t (:inverse-video t :foreground ,red))))
     `(region ((t (:background ,lightyellow))))

     `(popup-face ((t (:background ,verylightgray))))
     `(comint-highlight-prompt ((t (:inherit default))))
                                        ; other
     `(minibuffer-prompt ((t (:inherit default :weight bold))))
     `(mode-line ((t (:height 0.8 :foreground ,white))))
     `(mode-line-buffer-id ((t (:height 1.2 :weight normal :foreground ,black  :family "Tisa Sans Pro"))))
     `(mode-line-inactive ((t (:inherit mode-line))))
     `(vertical-border ((t (:foreground ,lightgray :background ,white))))
     `(match ((t (:inherit isearch))))
     `(header-line ((t (:foreground ,gray :background ,lightgray :family "Tisa Sans Pro"))))
     `(show-paren-match ((t (:underline ,pureblack))))
     `(helm-source-header ((t (:foreground ,darkgray :weight normal :underline nil :height 1.8 :family "Tisa Sans Pro"))))

     '(font-lock-comment-delimiter-face ((t (:inherit font-lock-comment-face :foreground nil))))
     '(font-lock-doc-face ((t (:inherit font-lock-comment-face :foreground nil))))
     '(font-lock-doc-string-face ((t (:inherit font-lock-comment-face :foreground nil))))

     `(highlight-indentation-face ((t (:background "#eaeada"))))

                                        ;'(show-paren-mismatch ((t (:background "magenta" :foreground nil :inverse-video t))))
     '(sp-show-pair-match-face ((t (:foreground nil :background nil :inherit show-paren-match))))
     '(sp-show-pair-enclosing ((t (:background nil))))
     '(sp-pair-overlay-face ((t (:background nil))))

     '(js2-external-variable ((t (:inherit default))))
     '(js2-jsdoc-value ((t (:inherit font-lock-comment-face))))
     '(js2-jsdoc-tag ((t (:inherit font-lock-comment-face))))
     '(js2-jsdoc-type ((t (:inherit font-lock-comment-face))))
     '(js2-function-param ((t (:inherit font-lock-variable-name-face))))

                                        ; Autocomplete with pop-tip generates empty whitespace at end of buffer
     '(whitespace-empty ((t (:background nil :foreground nil))))
     `(whitespace-line ((t (:foreground ,red))))
     '(whitespace-trailing ((t (:inherit trailing-whitespace :background nil))))
     `(whitespace-space ((t (:family "Menlo" :height 100))))

     '(secondary-selection ((t (:inherit highlight))))
     '(web-mode-html-tag-bracket-face ((t (:inherit default))))
     '(web-mode-html-tag-face ((t (:inherit default :weight bold))))
     '(web-mode-css-property-name-face ((t (:inherit default))))
     '(web-mode-css-selector-face ((t (:inherit default))))
     '(web-mode-html-attr-name-face ((t (:inherit default))))
     '(web-mode-function-call-face ((t (:inherit default))))
     '(web-mode-filter-face ((t (:inherit default))))
     '(web-mode-param-name-face ((t (:inherit font-lock-variable-name-face))))
     '(web-mode-doctype-face ((t (:inherit web-mode-comment-face))))
     '(web-mode-symbol-face ((t (:inherit web-mode-comment-face))))
     '(web-mode-current-element-highlight-face ((t (:inherit highlight))))

     '(ac-completion-face ((t (:inherit font-lock-comment-face))))
     '(ac-emacs-eclim-candidate-face ((t (:inherit ac-candidate-face))))
     '(ac-emacs-eclim-selection-face ((t (:inherit ac-selection-face))))
     '(popup-tip-face ((t (:inherit secondary-selection))))
     '(ghc-face-error ((t (:inherit error))))

     `(ediff-even-diff-A ((t (:background ,lightgray :foreground ,gray))))
     `(ediff-even-diff-B ((t (:background ,lightgray :foreground ,gray))))
     `(ediff-even-diff-C ((t (:background ,lightgray :foreground ,gray))))
     `(ediff-odd-diff-A ((t (:background ,lightgray :foreground ,gray))))
     `(ediff-odd-diff-B ((t (:background ,lightgray :foreground ,gray))))
     `(ediff-odd-diff-C ((t (:background ,lightgray :foreground ,gray))))

     `(company-preview ((t (:background nil))))
     `(company-preview-common ((t (:foreground ,gray))))
     `(company-template-field ((t (:inherit region))))
     `(company-tooltip-common ((t (:foreground ,black :weight bold))))
     `(company-tooltip ((t (:background ,verylightgray))))
     `(company-scrollbar-bg ((t (:inherit company-tooltip))))
     `(company-scrollbar-fg ((t (:inherit company-tooltip))))
     `(company-tooltip-selection ((t (:background ,lightgray))))
     `(company-tooltip-annotation ((t (:foreground ,blue))))

     `(vr/match-0 ((t (:inherit region))))
     `(vr/match-1 ((t (:inherit region))))
     `(vr/group-0 ((t (:foreground ,pink))))
     `(vr/group-1 ((t (:foreground ,gray))))
     `(vr/group-2 ((t (:foreground ,brown))))

     `(ivy-current-match ((t (:background ,verylightgray))))
     `(swiper-line-face ((t (:background ,verylightgray))))
     '(ivy-minibuffer-match-face-2 ((t (:inherit isearch))))
     `(ivy-minibuffer-match-face-3 ((t (:foreground ,pink))))
     `(ivy-minibuffer-match-face-1 ((t (:foreground ,brown))))

     `(helm-match ((t (:weight bold))))
     `(helm-candidate-number ((t (:inherit mode-line))))
     `(helm-selection ((t (:background ,verylightgray)))))))
(set-theme t)
(setq underline-minimum-offset 4)

(provide 'my-theme)
